[{"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\index.js":"1","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\App.js":"2","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Main.js":"4","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\config\\firebase.js":"5","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Specialist.js":"6","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\AuthContext.js":"7","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\SignIn.js":"8","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Dashboard.js":"9","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Reservation.js":"10","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\PageNotFound\\PageNotFound.js":"11","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\DashboardContext.js":"12","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CustomerDashboard.js":"13","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\CustomerContext.js":"14","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Queue.js":"15","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CurrentVisits.js":"16","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\IncomingVisits.js":"17","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CurrentCustomer.js":"18"},{"size":864,"mtime":1613073991682,"results":"19","hashOfConfig":"20"},{"size":1653,"mtime":1613074101832,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":459,"mtime":1613073666476,"results":"23","hashOfConfig":"20"},{"size":628,"mtime":1612351873207,"results":"24","hashOfConfig":"20"},{"size":190,"mtime":1612290123483,"results":"25","hashOfConfig":"26"},{"size":894,"mtime":1612426218553,"results":"27","hashOfConfig":"20"},{"size":1160,"mtime":1613071701103,"results":"28","hashOfConfig":"20"},{"size":3152,"mtime":1613071735863,"results":"29","hashOfConfig":"20"},{"size":2254,"mtime":1613075132139,"results":"30","hashOfConfig":"20"},{"size":162,"mtime":1612356941411,"results":"31","hashOfConfig":"20"},{"size":3614,"mtime":1613076779090,"results":"32","hashOfConfig":"20"},{"size":2658,"mtime":1613071441988,"results":"33","hashOfConfig":"20"},{"size":4228,"mtime":1613074753897,"results":"34","hashOfConfig":"20"},{"size":3795,"mtime":1612956347942,"results":"35","hashOfConfig":"20"},{"size":335,"mtime":1613068767539,"results":"36","hashOfConfig":"20"},{"size":336,"mtime":1613069572901,"results":"37","hashOfConfig":"20"},{"size":835,"mtime":1613074137596,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"4185ee",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1vykhbw",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\index.js",[],["83","84"],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\App.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Main.js",["85","86","87"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport firebase from 'firebase'\r\nexport default function Main() {\r\n    return (\r\n        <div className='operation-buttons'>\r\n            <Link to='/queue-management/reservation'>CUSTOMER</Link>\r\n            <Link to='/queue-management/current-customer'>CURRENT CUSTOMER</Link>\r\n            <Link to='/queue-management/signin'>SPECIALIST</Link>\r\n        </div>\r\n    )\r\n}","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\config\\firebase.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Specialist.js",[],["88","89"],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\AuthContext.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\SignIn.js",["90"],"import React, {useRef, useEffect} from 'react'\r\nimport { useAuth } from '../context/AuthContext'\r\nimport {Link, useHistory} from 'react-router-dom'\r\n\r\nexport default function SignIn() {\r\n\r\n    const mailRef = useRef(null);\r\n    const passRef = useRef(null);\r\n    const {signIn} = useAuth();\r\n    \r\n    const history = useHistory();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let email = mailRef.current.value;\r\n        let password = passRef.current.value;\r\n        try {\r\n            await signIn(email, password);\r\n            history.push('/queue-management/');\r\n        }catch(e){\r\n            console.log(e.message);\r\n        }\r\n    }\r\n       return (\r\n       <div className='login-container'>\r\n            <form>\r\n                <label>Mail : </label><br />\r\n                <input ref={mailRef} type=\"text\"/><br />\r\n                <label>Password : </label><br/>\r\n                <input ref={passRef} type=\"text\" /><br /><br />\r\n                <input type=\"submit\" onClick={handleSubmit} value=\"Login\" />\r\n            </form>\r\n            <Link to='/queue-management/'>Back</Link>\r\n        </div>\r\n        )\r\n}\r\n","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Dashboard.js",["91"],"import React, {useEffect} from 'react'\r\nimport { useAuth } from '../context/AuthContext'\r\nimport { useDashboard} from '../context/DashboardContext'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport default function Dashboard() {\r\n    const {logOut} = useAuth();\r\n    const {fetchSpecialist, specialistData,\r\n         callMeeting, startMeeting, endMeeting, cancelMeeting} = useDashboard();\r\n    // const [currentStatus, setCurrentStatus] = useState()\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        fetchSpecialist();\r\n    }, [])\r\n    const handleLogOut = async () => {\r\n       try {\r\n           await logOut()\r\n            history.push('/queue-management/');\r\n        }catch(e){\r\n            console.log(e.message);\r\n        }\r\n    }\r\n    if (!specialistData) {\r\n        return <div>Loading...</div>\r\n    }\r\n    console.log(specialistData);\r\n    const {specialistInfo} = specialistData;\r\n    const {currentPatient} = specialistData.specialistInfo;\r\n    return (\r\n        <div className='dashboard-container'>\r\n            <h1>DashBoard</h1>\r\n            <h1>Specialist : {specialistInfo.role}</h1>\r\n            <p>Current patient: {currentPatient.name}</p>\r\n            <p>Patient token: {currentPatient.token}</p>\r\n            <p>Status: {currentPatient.status}</p>\r\n            <div className='customer-container'>\r\n                {specialistData.customers.map((customer, key)=>{\r\n                    return (\r\n                        <div key={key} className='customer'>\r\n                            <p>{customer.token}</p>\r\n                            <p>{customer.name}</p>\r\n                            <button \r\n                                className={(key === 0 && currentPatient.token==='')   ? 'allow' : 'restrict'} \r\n                                onClick={()=>callMeeting(customer.token, customer.reservationCode, customer.name)}>\r\n                                Call\r\n                            </button>\r\n                            <button \r\n                                className={(currentPatient.token === customer.token && currentPatient.status==='called') ? 'allow' : 'restrict'} \r\n                                onClick={()=>startMeeting(customer.reservationCode)}>\r\n                                Start meeting\r\n                            </button>\r\n                            <button \r\n                                className={(currentPatient.token === customer.token && currentPatient.status==='started') ? 'allow' : 'restrict'} \r\n                                onClick={()=>endMeeting(customer.reservationCode)}>\r\n                                End meeting\r\n                            </button>\r\n                            <button \r\n                                className='cancel'\r\n                                onClick={()=>cancelMeeting(customer.reservationCode, customer.token, currentPatient.token)}>\r\n                                Cancel meeting\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                })}\r\n                </div>\r\n            <button onClick={handleLogOut}>Log Out</button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Reservation.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\PageNotFound\\PageNotFound.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\DashboardContext.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CustomerDashboard.js",["92","93","94"],"import React, {useEffect, useState} from 'react'\r\nimport {useCustomer} from '../context/CustomerContext'\r\nimport {useDashboard} from '../context/DashboardContext'\r\nimport CurrentVisits from '../components/CurrentVisits'\r\nimport IncomingVisits from '../components/IncomingVisits'\r\nimport Queue from './Queue'\r\n\r\nlet myInterval;\r\n\r\nexport default function CustomerDashboard(props) {\r\n    const [queueView, setQueueView] = useState(false);\r\n    const id = props.match.params.id;\r\n    const {fetchUserData, userData, queueData,\r\n         fetchIncomingVisits, loading, incomingVisits, cancelMeeting} = useCustomer();\r\n    useEffect(() => {\r\n        const handleUser = async () => {\r\n          await fetchUserData(id);\r\n          await fetchIncomingVisits();        }\r\n         handleUser();\r\n    }, [])\r\n    if (loading || !queueData || !incomingVisits) {\r\n        return <div className='customerDashboard-container'><h1>Loading...</h1></div>\r\n    }\r\n    if (!userData) {\r\n        return <div className='customerDashboard-container'><h1>Page is don't exist</h1></div>\r\n    }\r\n    if (userData.status === 'ended') {\r\n        return <div className='customerDashboard-container'><h1>A meeting has been ended, have a nice day!</h1></div>\r\n    }else if(userData.status === 'canceled'){\r\n        return <div className='customerDashboard-container'><h1>A meeting has been canceled</h1></div>\r\n    }\r\n    let customerView;\r\n    if (!queueView) {\r\n\r\n        customerView = (\r\n            <>\r\n                <p>Hello {userData.name}, Your token : {userData.token}</p>\r\n                {userData.status === 'called' && <p>Your turn is up, please proceede to the counter</p>}\r\n                {userData.status === 'started' && <p>A meeting have been started</p>}\r\n                <button onClick={()=>cancelMeeting(userData.reservationCode, queueData, userData.token)}>Cancel visit</button>\r\n                <div className='display'>\r\n                    <div className='current-visits'>\r\n                        <CurrentVisits queueData={queueData} />\r\n                    </div>\r\n                    <div className='incoming-visits'>\r\n                        <IncomingVisits incomingVisits={incomingVisits} />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }else{\r\n        customerView = <Queue userData={userData}/>\r\n    }\r\n    return (\r\n        <div className='customerDashboard-container'>\r\n            <h1>customerDashboard</h1>\r\n            <button onClick={()=>setQueueView(false)}>Display</button>\r\n            <button onClick={()=>setQueueView(true)}>Queue time</button>\r\n            {customerView}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\context\\CustomerContext.js",["95"],"import React, {useState, useContext} from 'react'\r\nimport {database} from '../config/firebase'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst CustomerContext = React.createContext();\r\n\r\nexport const useCustomer = () => {\r\n    return useContext(CustomerContext);\r\n}\r\n\r\nexport function CustomerProvider( {children} ) {\r\n    const [userData, setUserData] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [incomingVisits, setIncomingVistis] = useState();\r\n    const [queueData, setQueueData] = useState();\r\n    const [reservationCode, setReservationCode] = useState();\r\n    const history = useHistory();\r\n\r\n    const reservation = (specialist, name) => {\r\n        const reservationsRef = database.ref('reservations');\r\n        const counterRef = database.ref('/reservations/counter');\r\n        counterRef.transaction(value=>{\r\n            if (value === null) {\r\n              // the counter doesn't exist yet, start at one\r\n              return 1;\r\n            } else if (typeof value === 'number') {\r\n              // increment - the normal case\r\n              return value + 1;\r\n            }else{\r\n                console.log('Not a number');\r\n            }\r\n        })\r\n        .then((snap)=>{\r\n            let token = snap.snapshot.node_.value_;\r\n            const key = reservationsRef.push().getKey();\r\n            const date = new Date();\r\n            const customer = {\r\n                name,\r\n                specialist,\r\n                token,\r\n                status:\"incoming\",\r\n                reservationCode:key,\r\n                timestamp:date.getTime(),\r\n            }\r\n            reservationsRef.child(key).set(customer).then(() => {\r\n                setReservationCode(key);\r\n                // history.push(`/queue-management/display/${key}`);\r\n            })\r\n        })\r\n    }\r\n\r\n    const fetchUserData = (id) => {\r\n        const reservationRef = database.ref('/reservations')\r\n        reservationRef.on('value', snap => {\r\n            if (snap.child(id).exists()) {\r\n                let user = snap.child(id).val();\r\n                setUserData(user);\r\n                fetchDisplay();\r\n            }else{\r\n                console.log('dont exist');\r\n                setLoading(false);\r\n            }\r\n        })\r\n    }\r\n    const fetchDisplay = () => {\r\n        const currentVisits = database.ref('/specialists');\r\n        currentVisits.on('value', snap => {\r\n            const data = snap.val();\r\n            const queueArray = [];\r\n            for(let i in data){\r\n                queueArray.push(data[i]);\r\n            }\r\n            setLoading(false)\r\n            setQueueData(queueArray);\r\n        })\r\n    }\r\n    const fetchIncomingVisits = () => {\r\n        const reservationsRef = database.ref('/reservations');\r\n        const query = reservationsRef\r\n            .orderByChild('status')\r\n            .equalTo('incoming')\r\n            .limitToFirst(5);\r\n\r\n        query.on('value',snap => {\r\n            const data = snap.val();\r\n            const visitsArray = [];\r\n            for(let i in data){\r\n                visitsArray.push(data[i])\r\n            }\r\n            setIncomingVistis(visitsArray);\r\n        })                     \r\n    }\r\n    const cancelMeeting = async (reservationCode, queueData, token ) => {\r\n        const reservationRef = await database.ref('reservations/'+reservationCode)\r\n        await reservationRef.update({status:\"canceled\"});\r\n        await reservationRef.remove();\r\n        const findSpecialist = queueData.find(el=>el.currentPatient.token === token);\r\n        if (findSpecialist) {\r\n            const specialistId = findSpecialist.id;\r\n            const currentPatientRef =  await database.ref('specialists/'+specialistId+'/currentPatient');\r\n            await currentPatientRef.update({status:'', token:'',name:''})\r\n        }\r\n    }\r\n    const value = {\r\n        reservation,\r\n        fetchUserData,\r\n        fetchDisplay,\r\n        fetchIncomingVisits,\r\n        cancelMeeting,\r\n        reservationCode,\r\n        userData,\r\n        incomingVisits,\r\n        queueData,\r\n        loading,\r\n    }\r\n    return (\r\n        <CustomerContext.Provider value={value}>\r\n            {children}\r\n        </CustomerContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\Queue.js",["96","97","98"],"import React, {useEffect, useState} from 'react'\r\nimport {useDashboard} from '../context/DashboardContext'\r\n\r\nexport default function Queue({userData}) {\r\n    const [position, setPosition] = useState()\r\n    const [startTimer, setStartTimer] = useState(false);\r\n    const {fetchCustomers, specialistData} = useDashboard();\r\n    const [min, setMin] = useState();\r\n    const [sec, setSec] = useState();\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetchCustomers({role:userData.specialist})\r\n        }\r\n        fetchData();\r\n    }, [])\r\n    useEffect(() => {\r\n        specialistData && calculateWaitingTime();\r\n    }, [specialistData])\r\n    useEffect(() => {\r\n        if (startTimer) {\r\n            if (sec < 0) {\r\n                setMin(min-1)\r\n                setSec(59);\r\n                return;\r\n            }\r\n            if (min === 0 && sec ===0) {\r\n                setSec(0)\r\n                setMin((position-1)*10)\r\n                setStartTimer(false);\r\n            }\r\n            // save intervalId to clear the interval when the\r\n            // component re-renders\r\n            const intervalId = setInterval(() => {\r\n                setSec(sec - 1);\r\n            }, 1000);\r\n            // clear interval on re-render to avoid memory leaks\r\n            return () => clearInterval(intervalId);\r\n            // add timeLeft as a dependency to re-rerun the effect\r\n            // when we update it\r\n\r\n        }\r\n      }, [sec, startTimer]);\r\n    if(!specialistData){\r\n        return (\r\n        <div className='queue-container'>\r\n            <h1>Loading...</h1>\r\n        </div>\r\n        )\r\n    }\r\n    // console.log(specialistData.customers);\r\n    const calculateWaitingTime = () => {\r\n        const {customers} = specialistData;\r\n        let indexInQueue;\r\n        customers.forEach((customer, index) => {\r\n            if (userData.reservationCode === customer.reservationCode) {\r\n                indexInQueue = index;\r\n            }\r\n        });\r\n        setPosition(indexInQueue);\r\n        //LETS SAY, THAT ONE SERVICE IS APPROXIMATELY 10min.\r\n        let serviceTime = 10;\r\n        //START OF THE MEETING\r\n        let begginTimestamp = customers[0].meetingStartTime;\r\n        if (begginTimestamp) {\r\n            let startTime = new Date (begginTimestamp);\r\n                    // END TIME IS MAX 10min\r\n            let endTime = new Date ( startTime );\r\n            endTime.setMinutes ( startTime.getMinutes() + 10 );\r\n            //NOW TIME\r\n            let now = new Date().getTime();\r\n            //SUBRTRACTING TO GET SECONDS AND MINUTES BETWEEN THIS TIME AND MAX END MEETING TIME\r\n            if (now>endTime.getTime()) {\r\n                console.log('Time already passed, current meeting is longer than 10 minutes');\r\n                setSec(0)\r\n                setMin(indexInQueue*serviceTime)\r\n                setStartTimer(false);\r\n            }else{\r\n                let distance = endTime.getTime() - now;\r\n                let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n                let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n                console.log('minutes : '+minutes);\r\n                console.log('seconds : '+seconds);\r\n                setSec(seconds);\r\n                setMin(minutes);\r\n                setStartTimer(true);\r\n            }\r\n        }else{\r\n            setSec(0)\r\n            setMin(indexInQueue*serviceTime)\r\n            setStartTimer(false);\r\n        }\r\n    }\r\n    return (\r\n        <div className='queue-container'>\r\n            <h1>Your're {position+1}th in the queue</h1>\r\n            <h1>Queue waiting time</h1>\r\n            {!startTimer ? <p>{min} : {sec}</p> : (position === 0 ? <p>00:00</p> : <p>{min+(position-1)*10}:{sec}</p>)}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CurrentVisits.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\IncomingVisits.js",[],"C:\\Users\\User\\Desktop\\MyProgramming\\React\\queue-management\\src\\components\\CurrentCustomer.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"107","line":1,"column":26,"nodeType":"105","messageId":"106","endLine":1,"endColumn":35},{"ruleId":"103","severity":1,"message":"108","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":16},{"ruleId":"99","replacedBy":"109"},{"ruleId":"101","replacedBy":"110"},{"ruleId":"103","severity":1,"message":"107","line":1,"column":24,"nodeType":"105","messageId":"106","endLine":1,"endColumn":33},{"ruleId":"111","severity":1,"message":"112","line":14,"column":8,"nodeType":"113","endLine":14,"endColumn":10,"suggestions":"114"},{"ruleId":"103","severity":1,"message":"115","line":3,"column":9,"nodeType":"105","messageId":"106","endLine":3,"endColumn":21},{"ruleId":"103","severity":1,"message":"116","line":8,"column":5,"nodeType":"105","messageId":"106","endLine":8,"endColumn":15},{"ruleId":"111","severity":1,"message":"117","line":20,"column":8,"nodeType":"113","endLine":20,"endColumn":10,"suggestions":"118"},{"ruleId":"103","severity":1,"message":"119","line":17,"column":11,"nodeType":"105","messageId":"106","endLine":17,"endColumn":18},{"ruleId":"111","severity":1,"message":"120","line":15,"column":8,"nodeType":"113","endLine":15,"endColumn":10,"suggestions":"121"},{"ruleId":"111","severity":1,"message":"122","line":18,"column":8,"nodeType":"113","endLine":18,"endColumn":24,"suggestions":"123"},{"ruleId":"111","severity":1,"message":"124","line":42,"column":10,"nodeType":"113","endLine":42,"endColumn":27,"suggestions":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'firebase' is defined but never used.",["126"],["127"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSpecialist'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'useDashboard' is defined but never used.","'myInterval' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchIncomingVisits', 'fetchUserData', and 'id'. Either include them or remove the dependency array.",["129"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCustomers' and 'userData.specialist'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'calculateWaitingTime'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'min' and 'position'. Either include them or remove the dependency array. You can also do a functional update 'setMin(m => ...)' if you only need 'min' in the 'setMin' call.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [fetchSpecialist]",{"range":"143","text":"144"},"Update the dependencies array to be: [fetchIncomingVisits, fetchUserData, id]",{"range":"145","text":"146"},"Update the dependencies array to be: [fetchCustomers, userData.specialist]",{"range":"147","text":"148"},"Update the dependencies array to be: [calculateWaitingTime, specialistData]",{"range":"149","text":"150"},"Update the dependencies array to be: [min, position, sec, startTimer]",{"range":"151","text":"152"},[549,551],"[fetchSpecialist]",[794,796],"[fetchIncomingVisits, fetchUserData, id]",[567,569],"[fetchCustomers, userData.specialist]",[653,669],"[calculateWaitingTime, specialistData]",[1466,1483],"[min, position, sec, startTimer]"]